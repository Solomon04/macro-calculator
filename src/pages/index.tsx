import Head from 'next/head'
import { Inter } from '@next/font/google'
import { FormEvent, useMemo, useState } from 'react'
import {
  activityLevelOptions,
  consultingOptions,
  goalOptions,
  macroExperienceOptions,
  steps,
  weightliftingExperienceOptions,
} from '@/constants/data'
import CallToAction from '@/components/CallToAction'
import PastExperience from '@/components/PastExperience'
import TotalActivity from '@/components/TotalActivity'
import PhysicalAttributes from '@/components/PhysicalAttributes'
import { ArrowRightCircleIcon } from '@heroicons/react/24/solid'
import Stepper from '@/components/Stepper'
import Button from '@/components/Button'
import {
  calculateCaloriesForWeightGain,
  calculateTotalDailyExpenditure,
} from '@/formulas/tdee'
import {
  balancedFormula,
  highCarbFormula,
  highProteinFormula,
  ketoFormula,
  lowCarbFormula,
} from '@/formulas/macros'
import DividedBarGraphCard from '@/components/DividedBarGraphCard'
import DietTable from '@/components/DietTable'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [currentStep, setCurrentStep] = useState(steps[0])
  const [unit, setUnit] = useState<Unit>('Imperial')
  const [sex, setSex] = useState<Sex>('Male')
  const [age, setAge] = useState(18)
  const [height, setHeight] = useState(70)
  const [weight, setWeight] = useState(180)
  const [activityLevel, setActivityLevel] = useState(activityLevelOptions[0])
  const [tdee, setTdee] = useState(0)
  const [bmr, setBmr] = useState<number | undefined>()
  const [bodyFatPercentage, setBodyFatPercentage] = useState()
  const [isCalculated] = useMemo(() => {
    return [bmr && tdee]
  }, [bmr, tdee])
  const [macroTrackingExperience, setMacroTrackingExperience] = useState(
    macroExperienceOptions[0]
  )
  const [weightliftingExperience, setWeightliftingExperience] = useState(
    weightliftingExperienceOptions[0]
  )
  const [dietPlans, setDietPlans] = useState<DietPlan[]>([])
  const [goal, setGoal] = useState(goalOptions[0])
  const [callToAction, setCallToAction] = useState(consultingOptions[0])
  const [email, setEmail] = useState('')
  const [name, setName] = useState('')
  const [wantsConsulting, setWantsConsulting] = useState(true)
  const [submitting, setSubmitting] = useState(false)

  const incrementStep = () => {
    let stepIndex = currentStep.id - 1
    setCurrentStep(steps[stepIndex + 1])
  }

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()

    if (!lastStep) {
      return incrementStep()
    }

    setSubmitting(true)

    const { tdee, bmr, diets } = calculateTotalDailyExpenditure(
      weight,
      height,
      age,
      sex,
      activityLevel,
      unit
    )

    let balanced = balancedFormula(tdee + goal.net)
    console.log({ maintain: balancedFormula(tdee), balanced })
    let lowCarb = lowCarbFormula(tdee + goal.net)
    let highCarb = highCarbFormula(tdee + goal.net)
    let highProtein = highProteinFormula(tdee + goal.net)
    let keto = ketoFormula(tdee + goal.net)

    setDietPlans([balanced, lowCarb, highCarb, keto])

    // Send email to the backend
    console.log('Send email to ConvertKIT via API', {
      email: email,
      name: name,
    })
    console.log('Ping sendgrid dynamic template via API', {
      email: email,
      tdee: tdee,
      wantsConsulting: wantsConsulting,
      goal: goal,
      callToAction: callToAction,
      diets: {
        balanced,
        lowCarb,
        highCarb,
        highProtein,
        keto,
      },
    })

    setTdee(tdee)
    setBmr(bmr)
  }
  const handleStepper = (step: any) => {
    setCurrentStep(step)
  }

  const [lastStep] = useMemo(() => {
    return [currentStep.id === 4]
  }, [currentStep])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='max-w-5xl mx-auto py-12 px-4 sm:px-0'>
        <Stepper
          steps={steps}
          onClick={handleStepper}
          currentStep={currentStep}
        />
        <div className=''>
          {/*Results*/}
          {isCalculated && dietPlans.length > 0 ? (
            <DietTable dietPlans={dietPlans} />
          ) : (
            <form onSubmit={(e) => handleSubmit(e)} className='mt-5'>
              <div className='grid grid-cols-1 sm:grid-cols-6 gap-8'>
                {/*Step One: Fill out your attributes*/}
                {currentStep.id === 1 ? (
                  <PastExperience
                    weightliftingExperience={weightliftingExperience}
                    setWeightliftingExperience={setWeightliftingExperience}
                    macroTrackingExperience={macroTrackingExperience}
                    setMacroTrackingExperience={setMacroTrackingExperience}
                  />
                ) : null}

                {currentStep.id === 2 ? (
                  <PhysicalAttributes
                    height={height}
                    setHeight={setHeight}
                    age={age}
                    setAge={setAge}
                    bodyFatPercentage={bodyFatPercentage}
                    setBodyFatPercentage={setBodyFatPercentage}
                    sex={sex}
                    setSex={setSex}
                    unit={unit}
                    setUnit={setUnit}
                    weight={weight}
                    setWeight={setWeight}
                  />
                ) : null}

                {currentStep.id === 3 ? (
                  <TotalActivity
                    activityLevel={activityLevel}
                    setActivityLevel={setActivityLevel}
                  />
                ) : null}

                {currentStep.id === 4 ? (
                  <CallToAction
                    email={email}
                    setEmail={setEmail}
                    goal={goal}
                    setGoal={setGoal}
                    wantsConsulting={wantsConsulting}
                    setWantsConsulting={setWantsConsulting}
                    callToAction={callToAction}
                    setCallToAction={setCallToAction}
                    name={name}
                    setName={setName}
                  />
                ) : null}
              </div>

              <div className='flex items-center justify-end mt-5 space-x-4'>
                <Button variant='solid' type='submit'>
                  {lastStep ? 'See Results' : 'Next'}{' '}
                  <ArrowRightCircleIcon className='w-5 h-5 ml-1 stroke-2' />
                </Button>
              </div>
            </form>
          )}
        </div>
      </main>
    </>
  )
}
